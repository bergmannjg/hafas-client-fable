// typescript declaration file for hafas-client, https://www.npmjs.com/package/hafas-client

export interface Location {
    type: 'location';
    id?: string;
    name?: string;
    poi?: boolean;
    address?: string;
    longitude?: number;
    latitude?: number;
    altitude?: number;
}

// Each public transportation network exposes its products as boolean properties.
// They are modelled as TypeScript boolean index types.
// The products may be similar to Extended GTFS Route Types (https://developers.google.com/transit/gtfs/reference/extended-route-types)
// and to Netex Vehicle types (https://www.vdv.de/vdv-462-netex-recommendation-v00-22-english.pdfx)
export interface Products {
    [product: string]: boolean;
}

// products of Bvg network, generated by a tool
export interface ProductsBvg extends Products {
    "bus": boolean;
    "express": boolean;
    "ferry": boolean;
    "regional": boolean;
    "suburban": boolean;
    "subway": boolean;
    "tram": boolean;
}
// products of Db network, generated by a tool
export interface ProductsDb extends Products {
    "bus": boolean;
    "ferry": boolean;
    "national": boolean;
    "nationalExpress": boolean;
    "regional": boolean;
    "regionalExp": boolean;
    "suburban": boolean;
    "subway": boolean;
    "taxi": boolean;
    "tram": boolean;
}
// products of Hvv network, generated by a tool
export interface ProductsHvv extends Products {
    "akn": boolean;
    "anruf-sammel-taxi": boolean;
    "bus": boolean;
    "express-bus": boolean;
    "ferry": boolean;
    "long-distance-bus": boolean;
    "long-distance-train": boolean;
    "regional-express-train": boolean;
    "regional-train": boolean;
    "suburban": boolean;
    "subway": boolean;
}
// products of Insa network, generated by a tool
export interface ProductsInsa extends Products {
    "bus": boolean;
    "national": boolean;
    "nationalExpress": boolean;
    "regional": boolean;
    "suburban": boolean;
    "tourismTrain": boolean;
    "tram": boolean;
}
// products of Nahsh network, generated by a tool
export interface ProductsNahsh extends Products {
    "bus": boolean;
    "ferry": boolean;
    "interregional": boolean;
    "national": boolean;
    "nationalExpress": boolean;
    "onCall": boolean;
    "regional": boolean;
    "suburban": boolean;
    "subway": boolean;
    "tram": boolean;
}
// products of Oebb network, generated by a tool
export interface ProductsOebb extends Products {
    "bus": boolean;
    "ferry": boolean;
    "interregional": boolean;
    "national": boolean;
    "nationalExpress": boolean;
    "onCall": boolean;
    "regional": boolean;
    "suburban": boolean;
    "subway": boolean;
    "tram": boolean;
}
// products of Pkp network, generated by a tool
export interface ProductsPkp extends Products {
    "bus": boolean;
    "high-speed-train": boolean;
    "long-distance-train": boolean;
    "regional-train": boolean;
}
// products of Rsag network, generated by a tool
export interface ProductsRsag extends Products {
    "bus": boolean;
    "ferry": boolean;
    "ic-ec": boolean;
    "ice": boolean;
    "long-distance-train": boolean;
    "on-call": boolean;
    "regional-train": boolean;
    "s-bahn": boolean;
    "tram": boolean;
    "u-bahn": boolean;
}
// products of SBahnMunich network, generated by a tool
export interface ProductsSBahnMunich extends Products {
    "bus": boolean;
    "ic-ec": boolean;
    "ice": boolean;
    "ir-d": boolean;
    "on-call": boolean;
    "region": boolean;
    "sbahn": boolean;
    "tram": boolean;
    "ubahn": boolean;
}

export interface Station {
    type: 'station';
    id: string;
    name: string;
    station?: Station;
    location?: Location;
    products?: Products;
    isMeta?: boolean;
    regions?: string[]; // region ids
}

export interface Stop {
    type: 'stop';
    id: string;
    station?: Station;
    name: string;
    location?: Location;
    products: Products;
    isMeta?: boolean;
}

export interface Region {
    type: 'region';
    id: string;
    name: string;
    stations: string[]; // station ids
}

export interface Line {
    type: 'line';
    id?: string;
    name?: string;
    adminCode?: string;
    fahrtNr?: string;
    additionalName?: string;
    product?: string;
    public?: boolean;
    mode: 'train' | 'bus' | 'watercraft' | 'taxi' | 'gondola' | 'aircraft' | 'car' | 'bicycle' | 'walking';
    routes?: string[]; // routes ids
    operator?: Operator;
    express?: boolean;
    metro?: boolean;
    night?: boolean;
    nr?: number;
    symbol?: string;
}

export interface Route {
    type: 'route';
    id: string;
    line: string;
    mode: 'train' | 'bus' | 'watercraft' | 'taxi' | 'gondola' | 'aircraft' | 'car' | 'bicycle' | 'walking';
    stops: string[]; // stop ids
}

export interface Cycle {
    min?: number;
    max?: number;
    nr?: number;
}

export interface ArrivalDeparture {
    arrival?: number;
    departure?: number;
}

export interface Schedule {
    type: 'schedule';
    id: string;
    route: string;
    mode: 'train' | 'bus' | 'watercraft' | 'taxi' | 'gondola' | 'aircraft' | 'car' | 'bicycle' | 'walking';
    sequence: ArrivalDeparture[];
    starts: string[]; // array of Unix timestamps
}

export interface Operator {
    type: 'operator';
    id: string;
    name: string;
}

export interface Hint {
    type: 'hint';
    code: string;
    summary?: string;
    text: string;
}

export interface StopOver {
    stop: Station | Stop;
    departure?: string; // null, if last stopOver of trip
    departureDelay?: number;
    plannedDeparture?: string;
    departurePlatform?: string;
    plannedDeparturePlatform?: string;
    arrival?: string; // null, if first stopOver of trip
    arrivalDelay?: number;
    plannedArrival?: string;
    arrivalPlatform?: string;
    plannedArrivalPlatform?: string;
    remarks?: Hint[];
}

export interface Trip {
    id: string;
    origin: Stop;
    departure: string;
    departurePlatform?: string;
    plannedDeparture: string;
    plannedDeparturePlatform?: string;
    departureDelay?: number;
    destination: Stop;
    arrival: string;
    arrivalPlatform?: string;
    plannedArrival: string;
    plannedArrivalPlatform?: string;
    arrivalDelay?: number;
    stopovers: StopOver[];
    remarks?: Hint[];
    line?: Line;
    direction?: string;
    reachable?: boolean;
}

export interface Price {
    amount: number;
    currency: string;
    hint?: string;
}

export interface Alternative {
    direction?: string;
    line?: Line;
    plannedWhen?: string;
    tripId: string;
    when?: string;
}

export interface Leg {
    tripId?: string;
    origin: Station | Stop;
    destination: Station | Stop;
    departure?: string;
    plannedDeparture: string;
    departureDelay?: number;
    departurePlatform?: string;
    plannedDeparturePlatform?: string;
    arrival?: string;
    plannedArrival: string;
    arrivalDelay?: number;
    arrivalPlatform?: string;
    plannedArrivalPlatform?: string;
    stopovers?: StopOver[];
    schedule?: number;
    price?: Price;
    operator?: number;
    direction?: string;
    line?: Line;
    reachable?: boolean;
    cancelled?: boolean;
    walking?: boolean;
    loadFactor?: string;
    distance?: number;
    public?: boolean;
    transfer?: boolean;
    cycle?: Cycle;
    alternatives?: Alternative[];
}

export interface Journey {
    type: 'journey';
    legs: Leg[];
    refreshToken?: string;
    remarks?: Hint[];
    price?: Price;
    cycle?: Cycle;
}

export interface Journeys {
    journeys: Journey[];
}

export interface Duration {
    duration: number;
    stations: ReadonlyArray<Station | Stop>;
}

export interface JourneysOptions {
    departure?: Date;
    arrival?: Date;
    results?: number; // number of journeys
    via?: string; // let journeys pass this station
    stopovers?: boolean; // return stations on the way?
    transfers?: number; // Maximum nr of transfers. Default: Let HAFAS decide.
    transferTime?: number; // minimum time for a single transfer in minutes
    accessibility?: string; // 'none', 'partial' or 'complete'
    bike?: boolean; // only bike-friendly journeys
    products?: Products;
    tickets?: boolean; // return tickets? only available with some profiles
    polylines?: boolean; // return a shape for each leg?
    remarks?: boolean; // parse & expose hints & warnings?
    walkingSpeed?: string; // 'slow', 'normal', 'fast'
    startWithWalking?: boolean;
    language?: string; // language to get results in
    scheduledDays?: boolean; // parse which days each journey is valid on
}

export interface LocationsOptions {
    fuzzy?: boolean; // find only exact matches?
    results?: number; // how many search results?
    stops?: boolean; // return stops/stations?
    addresses?: boolean;
    poi?: boolean; // points of interest
    linesOfStops?: boolean; // parse & expose lines at each stop/station?
    language?: string;
}

export interface TripOptions {
    stopovers?: boolean; // return stations on the way?
    polyline?: boolean; // return a shape for the trip?
    remarks?: boolean; // parse & expose hints & warnings?
    language?: string;
}

export interface StopOptions {
    linesOfStops?: boolean; // parse & expose lines at the stop/station?
    language?: string;
}

export interface DeparturesArrivalsOptions {
    when?: Date;
    direction?: string; // only show departures heading to this station
    duration?: number; // show departures for the next n minutes
    results?: number; // max. number of results; `null` means "whatever HAFAS wants"
    linesOfStops?: boolean; // parse & expose lines at the stop/station?
    remarks?: boolean; // parse & expose hints & warnings?
    stopovers?: boolean; // fetch & parse previous/next stopovers?
    includeRelatedStations?: boolean; // departures at related stations
    language?: string;
}

export interface RefreshJourneyOptions {
    stopovers?: boolean; // return stations on the way?
    polylines?: boolean; // return a shape for each leg?
    tickets?: boolean; // return tickets? only available with some profiles
    remarks?: boolean; // parse & expose hints & warnings?
    language?: string;
}

export interface NearByOptions {
    results?: number; // maximum number of results
    distance?: number; // maximum walking distance in meters
    poi?: boolean; // return points of interest?
    stops?: boolean; // return stops/stations?
    linesOfStops?: boolean; // parse & expose lines at each stop/station?
    language?: string;
}

export interface ReachableFromOptions {
    when?: Date;
    maxTransfers?: number; // maximum of 5 transfers
    maxDuration?: number; // maximum travel duration in minutes, pass `null` for infinite
    products?: Products;
}

export interface HafasClient {
    journeys: (from: string | Station | Location, to: string | Station | Location, options: JourneysOptions | undefined) => Promise<Journeys>;
    refreshJourney: (refreshToken: string, options: RefreshJourneyOptions | undefined) => Promise<Journey>;
    trip: (id: string, name: string, options: TripOptions | undefined) => Promise<Trip>;
    departures: (station: string | Station, options: DeparturesArrivalsOptions | undefined) => Promise<Journeys>;
    arrivals: (station: string | Station, options: DeparturesArrivalsOptions | undefined) => Promise<Journeys>;
    locations: (from: string, options: LocationsOptions | undefined) => Promise<ReadonlyArray<Station | Stop | Location>>;
    stop: (id: string, options: StopOptions | undefined) => Promise<Stop>;
    nearBy: (location: Location, options: NearByOptions | undefined) => Promise<Stop>;
    reachableFrom: (address: Location, options: ReachableFromOptions | undefined) => Promise<Duration[]>;
}

export enum Profile {
    bvg = "bvg",
    cmta = "cmta",
    cfl = "cfl",
    db = "db",
    dbBusradarNrw = "dbBusradarNrw",
    hvv = "hvv",
    insa = "insa",
    invg = "invg",
    nahsh = "nahsh",
    nvv = "nvv",
    oebb = "oebb",
    pkp = "pkp",
    rmv = "rmv",
    rsag = "rsag",
    saarfahrplan = "Saarfahrplan",
    sBahnMunich = "sBahnMunich",
    sncb = "sncb",
    svv = "svv",
    vbb = "vbb",
    vbn = "vbn",
    vmt = "vmt",
    vsn = "vsn"
}

declare function createClient(profile: object, userAgent: string): HafasClient;

export default createClient;
